<?php

/**
 * Implements hook_menu().
 *
 * XRDS Simple provides both a site-wide XRDS document at path xrds,
 * and a user-specific XRDS document at user/%user/xrds.
 */
function xrds_simple_menu() {
  $items = array();

  $items['xrds'] = array(
    'page callback' => 'xrds_simple_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['user/%user/xrds'] = array(
    'page callback' => 'xrds_simple_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_init().
 *
 * Add X-XRDS-Location and X-Yadis_location HTTP headers.
 * If the current page's path is: user/%user/*, then these 
 * headers point to that user's XRDS document: /user/%user/xrds.
 *
 * Otherwise, these headers point to the site-wide XRDS document: /xrds
 */
function xrds_simple_init() {
  if (arg(0) == 'user' && is_numeric(arg(1))) {
    $path = 'user/' . arg(1) . '/xrds';
  }
  else {
    $path = 'xrds';
  }

  // Prevent any language modifications to the url by generating and using a
  // fake language object.
  $language = new stdClass();
  $language->language = '';
  $language->prefix = '';

  $url = url($path, array('absolute' => TRUE, 'language' => $language));
  drupal_add_http_header('X-XRDS-Location', $url);
  drupal_add_http_header('X-Yadis-Location', $url);
  $xrds_element = array(
    '#tag' => 'meta',
    '#attributes' => array(
      'http-equiv' => 'X-XRDS-Location',
      'content' => $url,
    ),
  );
  $yadis_element = array(
    '#tag' => 'meta',
    '#attributes' => array(
      'http-equiv' => 'X-Yadis-Location',
      'content' => $url,
    ),
  );
  drupal_add_html_head($xrds_element, 'X-XRDS-Location');
  drupal_add_html_head($yadis_element, 'X-Yadis-Location');
}

/**
 * Page callback function for an XRDS document.
 *
 * This requests the XRDS from xrds_simple_document().  If there is
 * output returned, then the HTTP Content type is set to
 * application/xrds+xml, and the XRDS XML is outputted directly.
 */
function xrds_simple_page($account = NULL) {
  $output = xrds_simple_document($account);
  if ($output) {
    drupal_add_http_header('Content-type', 'application/xrds+xml');
    print $output;
  }
}

/**
 * Generates an XRDS document
 *
 * @param object $account A user account object to generate the XRDS document for, or NULL.
 * @return mixed An XRDS document in XML format, or FALSE if no modules answered hook_xrds().
 */
function xrds_simple_document($account = NULL) {
  $xrds = module_invoke_all('xrds', $account);

  if (empty($xrds)) {
    return FALSE;
  }

  $output = '<?xml version="1.0" encoding="UTF-8" ?>' . "\n";
  $output .= '<XRDS xmlns="xri://$xrds">' . "\n";

  foreach ($xrds as $xrd) {
    $output .= '  <XRD xmlns="xri://$xrd*($v*2.0)" version="2.0" xmlns:simple="http://xrds-simple.net/core/1.0"';
    $output .= ">\n";

    if (isset($xrd['type']) && is_array($xrd['type'])) {
      foreach ($xrd['type'] as $type) {
        $output .= '    <Type>' . check_plain($type) . '</Type>' . "\n";
      }
    }

    if (isset($xrd['expires']) && is_array($xrd['expires'])) {
      foreach ($xrd['expires'] as $expires) {
        $output .= '    <Expires>' . check_plain($expires) . '</Expires>' . "\n";
      }
    }

    foreach ($xrd['services'] as $service) {
      $output .= '    <Service priority="' . floor($service['priority']) . '">' . "\n";
      foreach ($service['data'] as $element => $values) {
        foreach ($values as $value) {
          if (!is_array($value)) {
            $data = $value;
            $value = array();
            $value['data'] = $data;
            $value['attributes'] = array();
          }

          $output .= '      <' . check_plain($element);
          $output .= drupal_attributes($value['attributes']);
          $output .= '>';
          $output .= check_plain($value['data']) . '</' . check_plain($element) . ">\n";
        }
      }
      $output .= '    </Service>' . "\n";
    }
    $output .= '  </XRD>' . "\n";

  }
  $output .= '</XRDS>';

  return $output;
}
